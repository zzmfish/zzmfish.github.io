# 《代码大全2》读书笔记

## 软件构建中的设计

> 要避免做出“聪明”的设计。应该做出简单且易于理解的设计。  

> **高扇入**是让大量的类使用某个给定的类。

> **低扇出**是让一个类里少量或适中地使用其他的类。

> 尽量使用标准的、常用的方法，让整个系统给人一种熟悉的感觉。  

> 通过限制子系统之间的通信来让每个子系统更有存在意义。



## 类

> **抽象数据类型**指一些数据以及对这些数据所进行操作的集合。

> **继承**给程序增加了复杂度，因此它是一种危险的技术。

## 高质量的子程序

> **内聚性**是指子程序中各种操作之间联系的紧密程序。

> **功能上的内聚性** 是说一个子程序仅执行一项操作。


## 防御式编程

> 子程序应该不因传入错误数据而被破坏，哪怕是由其他子程序产生的错误数据。

## 伪代码编程过程

## 使用变量的一般事项

> 把一个变量的引用点尽可能集中在一起。

> 尽可能缩短变量的存活时间。

## 变量名

> 一个好记的名字反映的通常都是问题，而不是解决方案。

> 命名规则的存在为你的代码增加了结构，减少了你需要考虑的事情。

## 基本数据类型

> 浮点数避免等量判断。

> 把布尔表达式的结果付给一个变量，从而使得这一判断的含义变得更加明显。

## 不常见的数据类型

> 把指针操作限制在子程序或者类里面。

> 全局变量破坏了模块化和智力上的可管理性。

## 直线型代码

> 让程序易于自上而下阅读，而不是让读者的目光跳来跳去。

## 条件语句

## 控制循环

> 注意三种情况：开始的情况，任意选择的中间情况，以及最终的情况。

> 把嵌套限制在3层以内。

## 不常见的控制结构

> 把递归限制在一个子程序内。循环递归（A -> B -> C -> A）非常危险，因为它很难检查。

> goto会破坏代码应该严格自上而下运行的原则。

## 表驱动法

## 一般控制问题

> 复杂的代码表明你还没有充分地理解你的程序，所以无法简化它。

> **结构化编程**的核心思想就是一个应用程序应该只采用一些单入单出的控制结构。

## 软件质量概述

> 提高生产效率和改善质量的最佳途径就是减少花在代码返工上的时间。
